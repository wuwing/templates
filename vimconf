" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
"  filetype plugin indent on
"endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif


set nu ""行号

""set showcmd

set foldenable ""代码折叠
set foldmethod=manual

set tabstop=4 ""tab长度
set shiftwidth=4 

""自动头文件
autocmd BufNewFile *.cpp exec ":call SetTitle()"
func SetTitle()
	call setline(1,"/******************************************************")
	call append(line("."), " * File Name:   ".expand("%"))
	call append(line(".")+1, " * Author:      kojimai")
	call append(line(".")+2, " * Create Time: ".strftime("%c"))
	call append(line(".")+3, "******************************************************/")
	call append(line(".")+4, "")
	call append(line(".")+5, "#include<cstdio>")
	call append(line(".")+6, "#include<cstring>")
	call append(line(".")+7, "#include<cmath>")
	call append(line(".")+8, "#include<algorithm>")
	call append(line(".")+9, "#include<iostream>")
	call append(line(".")+10, "using namespace std;")
	call append(line(".")+11, "int main() {")
	call append(line(".")+12, "	return 0;")
	call append(line(".")+13, "}")
	autocmd BufNewFile * normal G
endfunc

"" 全选
map <C-A> ggVG
map! <C-A> <Esc>ggVG

nnoremap <F2> :vert diffsplit

""编译
map <F5> : call Compile()<CR>
func! Compile()
	exec "w"
	if &filetype =='python'
		exec "!python %"
	elseif &filetype =='cpp'
		exec "!g++ % -o a.out"
	endif
endfunc

""运行
map <F6> :  call Run()<CR>
func! Run()
	exec "! ./a.out"
endfunc

""运行 从文件读入输入
map <F7> :  call Runin()<CR>
func! Runin()
	exec "! ./a.out < in.in"
endfunc

map <F4> : call Cwx()<CR>
func! Cwx()
	exec "w"
	exec "! $(wx-config --cxx) % $(wx-config --libs --cxxflags) -o %<"
endfunc

set completeopt=preview,menu
""高亮
set syntax=on

""缩进
set cindent

set enc=utf-8

set showmatch

""括号自动补全
:inoremap ( ()<ESC>i
:inoremap ) <c-r>=ClosePair(')')<CR>
"":inoremap { {<CR>}<ESC>O
:inoremap { {}<ESC>i
:inoremap <CR> <c-r>=Enter()<CR>

function! Enter()
	if getline('.')[col('.')-2] == '{' && getline('.')[col('.')-1] == '}'
		return "\<CR>\<ESC>O"
	else
		return "\<CR>"
	endif
endfunction

:inoremap } <c-r>=ClosePair('}')<CR>
:inoremap [ []<ESC>i
:inoremap ] <c-r>=ClosePair(']')<CR>
"":inoremap " ""<ESC>i
"":inoremap ' ''<ESC>i
:inoremap " <c-r>=Quato('"')<CR>
:inoremap ' <c-r>=Quato("'")<CR>

function! Quato(char)
	if getline('.')[col('.') - 1] == a:char
		return "\<Right>"
	elseif a:char == '"'
		return "\"\"\<Left>"
	else
		return "''\<Left>"
	endif
endfunction


function! ClosePair(char)
    if getline('.')[col('.') - 1] == a:char
        return "\<Right>"
    else
        return a:char
    endif
endfunction

:inoremap <backspace> <c-r>=Back()<CR>
function! Back()
	if getline('.')[col('.')-2] == '[' && getline('.')[col('.')-1] == ']'
		return "\<Right>\<backspace>\<backspace>"
	elseif getline('.')[col('.')-2] == '{' && getline('.')[col('.')-1] == '}'
		return "\<Right>\<backspace>\<backspace>"
	elseif getline('.')[col('.')-2] == '(' && getline('.')[col('.')-1] == ')'
		return "\<Right>\<backspace>\<backspace>"
	elseif getline('.')[col('.')-2] == "'" && getline('.')[col('.')-1] == "'"
		return "\<Right>\<backspace>\<backspace>"
	elseif getline('.')[col('.')-2] == '"' && getline('.')[col('.')-1] == '"'
		return "\<Right>\<backspace>\<backspace>"
	else
		return "\<backspace>"
	endif
endfunction

set encoding=utf-8 fileencodings=ucs-bom,utf-8,cp936
